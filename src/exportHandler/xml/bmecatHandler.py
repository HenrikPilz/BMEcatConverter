'''
Created on 12.05.2017

@author: henrik.pilz
'''
from datetime import datetime
import csv
import logging

from lxml.etree import ElementTree, Element, SubElement, Comment, tostring



class BMEcatHandler(ElementTree):
    
    ''' alle registrierten StartElementhandler '''
    _startElementHandler = {
                "article" : "Product",
                "article_details" : "ProductDetails", 
                "order_details" : "OrderDetails",
                "price_details" : "PriceDetails",
                "price" : "Price",                
                "mime" : "Mime",
                "mime_info" : "mimeInfo",
                "datetime" : "DateTime",
                "article_features" :"FeatureSet",
                "feature" : "Feature",
                "special_treatment_class" : "TreatmentClass",
                "article_reference" : "Reference" 
                }

    def createHeader(self):
        ''' Create Header of BMEcat'''
        top = Element('top')

        comment = Comment('Generated for PyMOTW')
        top.append(comment)
        
        child = SubElement(top, 'child')
        child.text = 'This child contains text.'
        
        child_with_tail = SubElement(top, 'child_with_tail')
        child_with_tail.text = 'This child has regular text.'
        child_with_tail.tail = 'And "tail" text.'
        
        child_with_entity_ref = SubElement(top, 'child_with_entity_ref')
        child_with_entity_ref.text = 'This & that'


        generated_on = str(datetime.datetime.now())
        
        # Configure one attribute with set()
        root = Element('opml')
        root.set('version', '1.0')
        
        root.append(Comment('Generated by ElementTree_csv_to_xml.py for PyMOTW'))
        
        head = SubElement(root, 'head')
        title = SubElement(head, 'title')
        title.text = 'My Podcasts'
        dc = SubElement(head, 'dateCreated')
        dc.text = generated_on
        dm = SubElement(head, 'dateModified')
        dm.text = generated_on
        
        body = SubElement(root, 'body')
        
        with open('podcasts.csv', 'rt') as f:
            current_group = None
            reader = csv.reader(f)
            for row in reader:
                group_name, podcast_name, xml_url, html_url = row
                if current_group is None or group_name != current_group.text:
                    # Start a new group
                    current_group = SubElement(body, 'outline', {'text':group_name})
                # Add this podcast to the group,
                # setting all of its attributes at
                # once.
                podcast = SubElement(current_group, 'outline',
                                     {'text':podcast_name,
                                      'xmlUrl':xml_url,
                                      'htmlUrl':html_url,
                                      })
                
        top = Element('top')

        children = [
            Element('child', num=str(i))
            for i in xrange(3)
            ]

        top.extend(children)

        print prettify(root)
        
        print self.prettify(top)

    def prettify(self, elem):
        """Return a pretty-printed XML string for the Element.
        """
        rough_string = ElementTree.tostring(elem, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="  ")
    
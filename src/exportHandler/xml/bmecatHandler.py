'''
Created on 12.05.2017

@author: henrik.pilz
'''
from datetime import datetime
import csv
import logging
import os

from lxml.etree import ElementTree, Element, SubElement, Comment, tostring
from _elementtree import Element



class BMEcatHandler(ElementTree):
    
    ''' alle registrierten StartElementhandler '''
    _startElementHandler = {
                "article" : "Product",
                "article_details" : "ProductDetails", 
                "order_details" : "OrderDetails",
                "price_details" : "PriceDetails",
                "price" : "Price",                
                "mime" : "Mime",
                "mime_info" : "mimeInfo",
                "datetime" : "DateTime",
                "article_features" :"FeatureSet",
                "feature" : "Feature",
                "special_treatment_class" : "TreatmentClass",
                "article_reference" : "Reference" 
                }

    def createHeader(self):
        ''' Create Header of BMEcat
        <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE BMECAT SYSTEM "bmecat_new_catalog.dtd">
<BMECAT version="
1.2
" xml:lang="de" xmlns="
http://www.bmecat.org/bmecat/1.2/bmecat_new_catalog
">
<HEADER>
...
</HEADER>
<T_NEW_CATALOG>
...
</T_NEW_CATALOG>
</BMECAT>
        '''
        
        userName = os.environ["USERNAME"]
        usplit = userName.split(" ")
        initals = usplit[0][0] + usplit[1][0]
        
        generationDate = datetime.date.today().isoformat()
        dateKz = datetime.date.today().
        generationTIme = datetime.time.time().isoformat(timespec='seconds')
                
        header = Element.XML("<HEADER> " &
"<GENERATOR_INFO>BMEcatConverter Contorion</GENERATOR_INFO>" &
"<CATALOG>" &
"<LANGUAGE>deu</LANGUAGE>" &
"<CATALOG_ID>" + "</CATALOG_ID>" &
"<CATALOG_VERSION>1.0</CATALOG_VERSION>" &
"<CATALOG_NAME>" + "</CATALOG_NAME>" &
'<DATETIME type="generation_date">' &
"<DATE>" + "</DATE>" &
"<TIME>"+ "</TIME>" &
"</DATETIME>" &
"<CURRENCY>EUR</CURRENCY>" &
"</CATALOG>" &
"<BUYER>" &
"<BUYER_NAME>Contorion GmbH</BUYER_NAME>" &
"</BUYER>" &
"<SUPPLIER>" &
"<SUPPLIER_NAME>Contorion GmbH</SUPPLIER_NAME>" &
"</SUPPLIER>" &
"</HEADER>")

        
        
        
        # Configure one attribute with set()
        root = Element('opml')
        root.set('version', '1.0')
        
        root.append(Comment('Generated by ElementTree_csv_to_xml.py for PyMOTW'))
        
        head = SubElement(root, 'head')
        title = SubElement(head, 'title')
        title.text = 'My Podcasts'
        dc = SubElement(head, 'dateCreated')
        dc.text = generated_on
        dm = SubElement(head, 'dateModified')
        dm.text = generated_on
        
        body = SubElement(root, 'body')
        
        with open('podcasts.csv', 'rt') as f:
            current_group = None
            reader = csv.reader(f)
            for row in reader:
                group_name, podcast_name, xml_url, html_url = row
                if current_group is None or group_name != current_group.text:
                    # Start a new group
                    current_group = SubElement(body, 'outline', {'text':group_name})
                # Add this podcast to the group,
                # setting all of its attributes at
                # once.
                podcast = SubElement(current_group, 'outline',
                                     {'text':podcast_name,
                                      'xmlUrl':xml_url,
                                      'htmlUrl':html_url,
                                      })
                
        top = Element('top')

        children = [
            Element('child', num=str(i))
            for i in xrange(3)
            ]

        top.extend(children)

        print prettify(root)
        
        print self.prettify(top)

    def prettify(self, elem):
        """Return a pretty-printed XML string for the Element.
        """
        reparsed = ElementTree.tostring(elem, 'utf-8')
        return reparsed.toprettyxml(indent="    ")
    